{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\E15\\\\FYP frontend\\\\src\\\\RestaurantList.js\",\n  _s = $RefreshSig$();\n// RestaurantList.js\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RestaurantList = () => {\n  _s();\n  const [restaurants, setRestaurants] = useState([]);\n  useEffect(() => {\n    const fetchRestaurants = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/restaurants');\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const data = await response.json();\n        console.log(data); // Log to see what's coming back\n        const sortedData = data.sort((a, b) => a.name.localeCompare(b.name));\n        setRestaurants(sortedData);\n      } catch (error) {\n        console.error(\"There was a problem fetching the restaurant data:\", error);\n      }\n    };\n    fetchRestaurants();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"All Restaurants\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: restaurants.map(restaurant => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n            to: `/restaurant/${restaurant._id}`,\n            children: restaurant.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this)]\n        }, restaurant._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(RestaurantList, \"UUwaAnmni1jVfIU2TonQ0iTwxYs=\");\n_c = RestaurantList;\nexport default RestaurantList;\nvar _c;\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","RestaurantList","_s","restaurants","setRestaurants","fetchRestaurants","response","fetch","ok","Error","status","data","json","console","log","sortedData","sort","a","b","name","localeCompare","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","restaurant","to","_id","_c","$RefreshReg$"],"sources":["C:/Users/E15/FYP frontend/src/RestaurantList.js"],"sourcesContent":["// RestaurantList.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst RestaurantList = () => {\r\n  const [restaurants, setRestaurants] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchRestaurants = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/restaurants');\r\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n        const data = await response.json();\r\n        console.log(data); // Log to see what's coming back\r\n        const sortedData = data.sort((a, b) => a.name.localeCompare(b.name));\r\n        setRestaurants(sortedData);\r\n      } catch (error) {\r\n        console.error(\"There was a problem fetching the restaurant data:\", error);\r\n      }\r\n    };\r\n    \r\n    fetchRestaurants();\r\n  }, []);\r\n  \r\n  return (\r\n    <div>\r\n   <div className=\"main-container\">\r\n      <h1>All Restaurants</h1>\r\n      <ul>\r\n        {restaurants.map(restaurant => (\r\n          <li key={restaurant._id}> {/* Make sure to use the correct unique key from your data, often it's _id for MongoDB documents */}\r\n            <Link to={`/restaurant/${restaurant._id}`}>{restaurant.name}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default RestaurantList;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMQ,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC;QACjE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;QAC3E,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;QACnB,MAAMI,UAAU,GAAGJ,IAAI,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,CAAC,CAAC;QACpEf,cAAc,CAACW,UAAU,CAAC;MAC5B,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;MAC3E;IACF,CAAC;IAEDhB,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAsB,QAAA,eACDtB,OAAA;MAAKuB,SAAS,EAAC,gBAAgB;MAAAD,QAAA,gBAC5BtB,OAAA;QAAAsB,QAAA,EAAI;MAAe;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB3B,OAAA;QAAAsB,QAAA,EACGnB,WAAW,CAACyB,GAAG,CAACC,UAAU,iBACzB7B,OAAA;UAAAsB,QAAA,GAAyB,GAAC,eACxBtB,OAAA,CAACF,IAAI;YAACgC,EAAE,EAAG,eAAcD,UAAU,CAACE,GAAI,EAAE;YAAAT,QAAA,EAAEO,UAAU,CAACV;UAAI;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA,GAD5DE,UAAU,CAACE,GAAG;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEnB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGV,CAAC;AAACzB,EAAA,CAnCID,cAAc;AAAA+B,EAAA,GAAd/B,cAAc;AAqCpB,eAAeA,cAAc;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}